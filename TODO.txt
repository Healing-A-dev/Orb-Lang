TODO LIST:

FEATURES:
	- Implement Modules:
		- Anything inside of a module should be ignored until the module is called
		- Must exit safely without interrupting the main program (until an error OUTSIDE of the module is encountered)
		- Must throw a compiler warning if something went wrong in the module
		- Cannot use an exessive amount of resources, as they will be compiled everytime they are called (for total isolation from the main program besides given arguments)

	- Finish Implementing Arrays:
		- Make values in an array callable (ex. Names{1})
		- Make values reassignable
		- Zero based indexing...?
			- I kinda like 1 based indexing though...I just makes sense..

	- Create an assembly compiler:	[WIP]
		- Compiles Orbit source code into assembly via 'Xohe'
		- Will use something known as "As is values", meaning no mathematical or concatenation operations will happen at compile time
		- There will be NO functions or anything of that sort either

		- Create an assembly wrapper in lua (MAYBE | NOT LIKELY) [DONE]
			- Be able to run and compile assembly files using an assembly wrapper written in lua

	- Create a simple Lua transpiler:	[CORE COMPLETED: Need to fixs arguments being converted to their orbit variable table values ex. VARIABLES.TEMPORARY.x1.VALUE should just be x1]
		- Converts Orbit functions & modules into Lua
		- Runs functions/modules, but only updates variables in Orbit
			- Converters the function/module into lua code that will be ran using the load() function
			eg:

			Orbit Code:
				func add(x1,x2) {
					ret x1 + x2
				}

				z = add(x,y)

			Lua Code:
				function add(x1,x2)
					return Variables.temporary[x1].Value + Variables.temporary[x2].Value
				end

				Variables.static.z.Value = add(x,y)

	- Finish implementing file importing:
	    - FIX static variables being callable from other files [DONE]
		- ADD 'container' keyword requirement for module files

BUG FIXES:
	- Fix concatenation [WIP]
	- Fix quotations in comments not working [throws unfinished string error] (DONE..? NO....)
	- Fix calling functions within the body of another function (ie. (FIXEDDDD :D, but very slow sadly)
	    func main() {
		    puts("Hello, World!\n")
		}
		main()
		#Breaks the Xohe transpiler (thows nil function call error)
	)
		* IDEA: My current idea to fix this problem is to add the function it is trying to call to the load string AHEAD of the function that calls it.
		* |> So in the example above (given how Orb processes functions) the order in which the functions are loaded into the string would be as following:
		* |> 1. puts() => 2. main
		* |> func puts(words) {
			 	#Blah blah blah words
			 }

			 func main() {
			 	puts("Hi")
			 }

			 main()
		* |> This would would solve the entire problem...just have to figure out how to implement it without breaking or re-writting zeverything :D

OPTIMIZATIONS:
    - Optimize internal function calling (very slow at the moment given that the function that the XOHE function lexer is currently recursive which is rather slow)
