# Imports
/=
@include "lib.std"
@include "Game/imports"
=/
@imports::load("state/*")
# Code

current_game_state := Game.state
player_username := Game.player_data{"username"}
player_inventory := Game.player_data{"inventory"}

mod Storage([&player_inventory => inventory, &player_username => username], type, server_ID, &m_args) {
    # Imports
    @include "lib.string"
    @include "lib.io"
    @include "Server"
    # Code
    func convert_to_utf8(str) {
        utf_8_chars := []
        str_len := str.len()
        for (s := 1, str_len(), 1) {
            byte := str.sub(s,s).byte()
            utf_8_chars.append(byte.shift(-8))
        }
        ret utf_8_chars.concat()
    }

    global func Save() {
        if (type == "local") {
            panic("WIP")
        } elseif (type == "sever") {
            @Server {
                .link(&Game.bannables => Bans, &inventory => inventory, &server_ID => ID, &username)
                # Checking if server is available
                server_status := ::ping_pong(1, server_ID)
                if (server_status != "OK") {
                    panic("Server: " << server_ID << " is down!\n", 304)
                }

                # Checking for bannable items
                iter := 0
                while (_,item := Bans.groups(iter) && Bans.next() != null) {
                    if (inventory.search(item)) {
                        ::Ban(username)
                        ::Display("BAN_MESSAGE")
                    }
                    iter = iter + 1
                }

                # Saving inventory and player data
                data := ::loadData(ID, convert_to_utf8(username))
                if (data := null) {
                    ::createNewSaveFile(username)
                    .free()
                } else {
                    ::enterSaveState()
                    _ ::savePlayerData(username, inventory, ID)
                    if (::pushResponse(_) != "OK") {
                        ::Display("Save failed, please try again later")
                    }
                    ::resetState()
                }

            }
        }
    }

    global func Load() {
        if (type == "local") {
            Game.fillIventoryFromConfigFile(io.read(Game.save_location))
        } elseif (type == "server") {
            @Server {
                .link(&username, &server_ID => ID)
                server_status := ::ping_pong(1, ID)
                if (server_status != "OK") {
                    panic("Server: " << ID << " is down!\n", 304)
                }

                ::enterLoadState()
                _ ::loadPlayerData(username, inventory, ID)
                if (::pushResponse(_) != "OK") {
                    ::Display("Loading failed, please try again later")
                }
                ::resetState()
            }
        }
    }
}


if (current_game_state == "LOAD") {
    @Storage::Load()
} elseif (current_game_state == "SAVE") {
    @Storage::Save()
}
