/= Orb Syntaxing and Convention =/

# Functions:
	# Defining a function
		<scope: none | global> func <name>(args) {

		}

		<scope: none | global> func <name> {
			# Function with no arguments can be written as such
		}

	# Calling a function
		foo(args)

------------------------------------------------------------------------------------------

# Variables:
	# Static variables ALWAYS have precidence over global ones, and will be checked for first
	# Declaring a new variable:
		<scope: none | global> foo := bar

	# Reassigning a variable
		foo = bar

	# Built-in variable functions:
		::length()				# Returns the legnth of the variable
		::string()				# Converts the value into a string (Returns false if not possible)
		::number()				# Converts the value into a number (Returns false if not possible)
		::split(<value>)        # Splits the value into an array of strings (Throws error if splitting is not possible)

	# Arrays:
		# Declaring an array
			<scope: none | global> foo := [
				bar := "Hello, World!"
			]

			foo{"buzz"} := "Buzz"
		    foo::fizz := "Fizz"

		# Calling an array value
			foo{"bar"}		# Option 1
			foo::bar			# Option 2

		# Builtin array functions
			::append(<value>)		# Inserts the value into the given array
			::remove(<index>)		# Removes the value in the array at the given index
			::length()				# Returns the length of the array
			::concat(<value>)		# Concatinates all values in the array combining them with the given value (Throws error if value is not a string or number)
			::invert()				# Switches the position of the keys and values (Key = value, value = Key)
			::ipairs()				# Returns a loop iterating over all numerical key, value pairs in the array (key == null if no more values are found)
			::pairs()				# Returns a loop iterating over all key, value pairs in the array (key == null if no more values are found)
			::sort(<function>)      # Sorts the array numerically (defualt), or sorts the array by the given function value

-------------------------------------------------------------------------------------------

# Control Flow:
    # 'for' loops:

    # 'while' loops:

    # 'if' statements:

-------------------------------------------------------------------------------------------
# Modules:
	# Modules are a special type of function that is ran as it own sperate program. Meaning that any variables, imports, and even functions do not exist within the scope of the module.
	# Defining a module:
		<scope: none | global> mod <name>([], <arguments>) {

		}

	# Defining a module (with linked functions, variable, etc)
		# Example program:

			@include("io")

			global age := 3000
			hobby := "Concrete"

			func greet() {
				name := io.read("What is your name?\n")
				putln("Hello, " << name)
				.name
			}

			mod dataCollection([&age as age, &hobby as hobby, &greet as greet, &io as io], &m_args) {
				@include("os")

				# Making it slightly simpler to use the arguments (arg{foo} instead of &m_args{foo})
				arg := &m_args

				Client := [
					age := age,
					hobby := hobby,
					name := greet()
				]

				name := &io.read("What is your name?\n")
				if (name == Client.name) {
					putln("WELCOME " << name << "\n")
					putln("No need to get situated, we already have you covered.\n")
					os.exit(0)
				}


				# Creating a function to show off module function calling
				func replaceClient {
					# Function MUST be global if you want to use it outside the scope of the module
					new_client = [
						age = &io.read("Enter your age: "),
						hobby = &io.read("Enter your favorite hobby: "),
						name = name
					]
					.new_client
				}

				global func displayClientData(table) {
					# Iterating over every value in the table
					while (key, value := table.pairs() && key != null) {
						put("Client " << key << ": " << value)
					}
				}

				if (arg{0} == "REPLACE_ACTIVE_CLIENT") {
					Client = replaceClient()
				} else {
					putln("LEAVE NOW IMPOSTER!!!\n")
					os.exit(1)
				}
				.Client
			}


	# Calling a module:
		# Example program using the program example above:
			@dataCollection("REPLACE_ACTIVE_CLIENT")
			@dataCollection::displayClientData()

-------------------------------------------------------------------------------------------

# Built-in Functions:
	puts(<value>)			# Prints the given data
	typeof(<value>)			# Returns the type of the given value (Number, String, Array, Bool, Function, Module)
	panic(<message>)		# Display and error with the given message; exits program
	number(<value>)			# Converts the given value to a number if possible; returns false if not possible
	string(<value>)			# Converts the given value to a string if possible; returns false if not possible
	length(<value>)			# Returns the length of the given value (Arrays, and Strings); returns null if not possible
	split(<value>, <value>) # Splits the value into an array of strings by the split value (arguemtn #2) (Throws error if splitting is not possible)
